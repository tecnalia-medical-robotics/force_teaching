#!/usr/bin/env python
"""
@package ibd_test_data
@file bridge_wrench_action_impl.py
@author Anthony Remazeilles
@brief Package containing reference data for initial dev

Copyright (C) {packageCopyright}
https://www.gnu.org/licenses/gpl.txt
"""

import rospy
from std_msgs.msg import Empty
from force_teaching_msgs.msg import TeachIbDForceGoal, TeachIbDForceFeedback, TeachIbDForceResult

# protected region user include package begin #
import actionlib
# protected region user include package end #

class BridgeWrenchActionConfig(object):
    """
    set of elements accessible through dynamic reconfigure
    autogenerated: don't touch this class
    """
    def __init__(self):
        pass

    def __str__(self):
        msg = "Instance of BridgeWrenchActionConfig class: {"
        msg += "}"
        return msg

class BridgeWrenchActionData(object):
    """
    set of input / output handled through the update methods
    autogenerated: don't touch this class
    """
    def __init__(self):
        """
        Definition of the BridgeWrenchActionData attributes
        """
        # input data
        self.in_looping = Empty()
        self.in_looping_updated = bool()
        pass

    def __str__(self):
        msg = "Instance of BridgeWrenchActionData class: \n {"
        msg += "in_looping: {} \n".format(self.in_looping)
        msg += "in_looping_updated: {} \n".format(self.in_looping_updated)
        msg += "}"
        return msg

class BridgeWrenchActionPassthrough(object):
    """
    set of passthrough elements slightly violating interface / implementation separation
    Autogenerated: don't touch this class
    """
    def __init__(self):
        """ Class to contain variable breaking the interface separation
        """
        self.ac_ibd_learn = None
        pass

class BridgeWrenchActionImplementation(object):
    """
    Class to contain Developer implementation.
    """
    def __init__(self):
        """
        Definition and initialisation of class attributes
        """
        self.passthrough = BridgeWrenchActionPassthrough()

        # protected region user member variables begin #
        self.is_action_running = False
        # protected region user member variables end #

    def configure(self, config):
        """
        @brief configuration of the implementation
        @param      self The object
        @param      config set of configuration parameters
        @return True on success
        """
        # protected region user configure begin #
        self.is_action_running = False
        goal = TeachIbDForceGoal()
        goal.is_on_contact = False
        # timeout to finish the action [s]
        goal.timeout = 10
        # minimum force expected per entry
        goal.th_min_force = 0.01
        # wether we learn the devaition before the contact
        goal.is_std_learned = True
        return True
        # protected region user configure end #



    def update(self, data, config):
        """
        @brief { function_description }

        @param      self The object
        @param      data data handled through the ros class
        @param      config parameters handled through dyn. recon.

        @return nothing
        """
        # protected region user update begin #

        if data.in_looping_updated:
            rospy.logwarn("Loop detected")

            if self.is_action_running:
                rospy.logerr("The previous action is not finished!")
                return
            goal = TeachIbDForceGoal()
            goal.is_on_contact = False
            # timeout to finish the action [s]
            goal.timeout = 10
            # minimum force expected per entry
            goal.th_min_force = 0.01
            # wether we learn the devaition before the contact
            goal.is_std_learned = True

            self.is_action_running = True
            self.passthrough.ac_ibd_learn.send_goal(goal)

        status = self.passthrough.ac_ibd_learn.simple_state
        if self.is_action_running and status == actionlib.SimpleGoalState.DONE:
            result = self.passthrough.ac_ibd_learn.get_result()
            rospy.logwarn("Action finished with result: \n {}".format(result))
            self.is_action_running = False

        # protected region user update end #


    # protected region user additional functions begin #
    # protected region user additional functions end #
